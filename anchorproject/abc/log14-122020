setTimeou(function(){
    $('#message'),fadeOut('slow);
}, 3000);



Database created

Database name:abc_staff

user : ad_admin

=========================


superuser
=========
username: owolabi
password:
qwerty1345
--------------------
username:whales
password:password1345

Startapp
----------------
Appname: staff
models:
1.  staff:
    admin login with email



=====================
logs in views.py

from django.shortcuts import render,redirect
from django.contrib.auth.models import User
from django.contrib import messages
from .models import Work_log
from staff.models import Staff_profile
def logs(request):
    if request.method == 'POST':
        first_name = request.POST['first_name']
        department = request.POST['department']
        team_leader = request.POST['team_leader']
        clock_in = request.POST['clock_in']
        work_title = request.POST['work_title']
       
        messages.success(request, 'You are now mark present for today work')
        if request.user.is_authenticated:
            id = request.user.id
            has_submitted = Work_log.objects.all().filter(id=id)
            if has_submitted:
                messages.error(request, 'You have already mark present') 
                return redirect('/staff/' + id)
        log =Work_log.objects.all(first_name=first_name,department=department,team_leader=team_leader,clock_in=clock_in,work_title=work_title)
        log.save()
        return redirect('/staff/' + id)
        =============================

models.py

from django.db import models
from django.contrib.auth.models import User
import datetime
import pytz
# Create your models here.

class Work_log(models.Model):
    first_name = models.CharField(max_length=200)
    department = models.CharField(max_length=200)
    team_leader = models.CharField(max_length=200)
    clock_in = models.DateTimeField(default=datetime.datetime.now(tz=pytz.UTC),blank=False,null=False)
    work_title = models.CharField(max_length=200,blank=False,null=False)
    

    def __str__(self):
        return self.team_leader





User created

username: python13
password: python1345



register views 
============================


# def register(request):
#     if request.method == 'POST':
#         form = UserNewForm(request.POST)
#         profile_form = ExtendUserForm(request.POST)


#         if form.is_valid() and profile_form.is_valid:
            
#             user = form.save()
#             profile = profile_form.save(commit=False)
#             profile.user = user

#             profile.save()



#             username = form.cleaned_data.get('username')
#             password = form.cleaned_data.get('password1')
#             user = authenticate(username=username,password=password)
#             login(request,user)


#             return redirect('staff')


#     else:
#         profile_form = ExtendUserForm()
#         form = UserNewForm()



#     context = {
#         'form':form,
#         'profile_form':profile_form
#     }            

#     return render (request,'registration/register.html',context )


# def register(request):
#     if request.method == 'POST':
#         username = request.POST['username']
#         first_name = request.POST['first_name']    
#         email = request.POST['email']
#         password1 = request.POST['password1']
#         password2 = request.POST['password2']
       
#         if password1 == password2:
#             #    Check username 
#                 if User.objects.filter(username=username).exists():
#                     messages.error(request, 'That username is taken')
#                     return redirect('signup')
#                 else:
#                     if User.objects.filter(email=email).exists():
#                         messages.error(request, 'That email is being used')
#                         return redirect('signup')

#                     else:
#                         # looks good    
#                         user = User.objects.create_user(username=username, password=password1, email=email, first_name=first_name)


#                         # Login after signup 
#                         # auth.login(request, user)
#                         # messages.success(request, 'You are now logged in')
#                         # return redirect('index')

#                         user.save()
#                         messages.success(request, 'You are now registered and can log in')
#                         return redirect('login')
#         else:
#             messages.error(request, 'Passwords do not match')    
#             return redirect('signup')

#     else:

#         return render(request, 'registration/register.html')




# def register(request):
#     if request.method == 'POST':
#         form = UserCreationForm(request.POST)
#         if form.is_valid():
#             form.save()
#             return redirect('/')
#     else:
#         # print(form.errors)    
#         # messages.error(request, messages=form.errors)
#         form = UserCreationForm() 

#     context = {
#         'form':form
#     }
       


   

#     return render(request, 'accounts/register.html', context)

    





# def logins(request):

    
    
#     if request.method == 'POST':
        
#         staff_id = request.POST['staff_id']     

#         user = auth.authenticate(request.POST,staff_id=staff_id)

        

#         if user is not None:
#             messages.error(request,'Invalid credentials')
#             return redirect ('login')
            

#         else:
#             login( request,user, backend='django.contrib.auth.backends.ModelBackend')
#             messages.success(request, 'You are now logged in')
#             return redirect('staff')


#     else:
#         return render (request, 'accounts/login.html')       


# def logins(request):
#     if request.method == 'POST':
#         form = LoginForm(data=request.POST) 
#         if form.is_valid:
#             user = form.get_user()
#             login(request, user)    
#             return redirect('index')
#     else: 
#         form = LoginForm() 
#     return render(request, 'accounts/login.html', {'form':form})


# def logouts(request):
#     if request.method == 'POST':
#         auth.logout(request)
#         messages.success(request,'You are now logged out')
#         return redirect('login')

#     else:
#         return render(request, 'accounts/login.html')    
        